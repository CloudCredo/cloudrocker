// This file was generated by counterfeiter
package fakes

import (
	"io"
	"net/url"
	"sync"

	"github.com/cloudcredo/cloudrocker/Godeps/_workspace/src/github.com/pivotal-golang/cacheddownloader"
)

type FakeCachedDownloader struct {
	FetchStub        func(urlToFetch *url.URL, cacheKey string, transformer cacheddownloader.CacheTransformer, cancelChan <-chan struct{}) (io.ReadCloser, int64, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		urlToFetch  *url.URL
		cacheKey    string
		transformer cacheddownloader.CacheTransformer
		cancelChan  <-chan struct{}
	}
	fetchReturns struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}
}

func (fake *FakeCachedDownloader) Fetch(urlToFetch *url.URL, cacheKey string, transformer cacheddownloader.CacheTransformer, cancelChan <-chan struct{}) (io.ReadCloser, int64, error) {
	fake.fetchMutex.Lock()
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		urlToFetch  *url.URL
		cacheKey    string
		transformer cacheddownloader.CacheTransformer
		cancelChan  <-chan struct{}
	}{urlToFetch, cacheKey, transformer, cancelChan})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(urlToFetch, cacheKey, transformer, cancelChan)
	} else {
		return fake.fetchReturns.result1, fake.fetchReturns.result2, fake.fetchReturns.result3
	}
}

func (fake *FakeCachedDownloader) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeCachedDownloader) FetchArgsForCall(i int) (*url.URL, string, cacheddownloader.CacheTransformer, <-chan struct{}) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].urlToFetch, fake.fetchArgsForCall[i].cacheKey, fake.fetchArgsForCall[i].transformer, fake.fetchArgsForCall[i].cancelChan
}

func (fake *FakeCachedDownloader) FetchReturns(result1 io.ReadCloser, result2 int64, result3 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}{result1, result2, result3}
}

var _ cacheddownloader.CachedDownloader = new(FakeCachedDownloader)
